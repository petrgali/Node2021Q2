const uuid = require('uuid').v4;

export interface IUser {
  id: string;
  name: string;
  login: string;
  password: string;
}
export interface IUserRaw {
  name?: string;
  login?: string;
  password?: string;
}
/**
 * Class to create a new user
 */
class User {
  public id: string;

  public name: string;

  public login: string;

  public password: string;

  /**
   * New user details
   * @param {Object} [userInfo={}] - User registration information
   * @param {String} [userInfo.id=uuid()] - Autogenerated user uuid
   * @param {String} [userInfo.name=TEST_NAME] - Provided user name
   * @param {String} [userInfo.login=TEST_LOGIN] - Provided user login
   * @param {String} [userInfo.password=TEST_PWD] - Provided user password
   */
  constructor({
    id = uuid(),
    name = 'TEST_NAME',
    login = 'TEST_LOGIN',
    password = 'TEST_PWD',
  } = {}) {
    /** @property {String} id - autogenerated user id */
    this.id = id;
    /** @property {String} name - user name */
    this.name = name;
    /** @property {String} login - user login */
    this.login = login;
    /** @property {String} id - user password */
    this.password = password;
  }

  /**
   * @property {Function} toResponse Removes password from user info and send back to caller
   * @param {User} user a User class instance
   * @returns {Object} User class object with trimmed password
   */
  static toResponse(user: User) {
    const { id, name, login } = user;
    return { id, name, login };
  }
}
module.exports = User;
